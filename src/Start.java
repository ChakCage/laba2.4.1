import java.util.Scanner;
import java.io.IOException;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.File;



public class Start {
    private static final Logger logger = Logger.getLogger(Start.class.getName());
    private static final FileHandler fileHandler;

    static {
        try {
            fileHandler = new FileHandler("Game_Log.txt");
            logger.addHandler(fileHandler);
            logger.setLevel(Level.ALL);
            logger.setUseParentHandlers(false);
        } catch (IOException e) {
            throw new ExceptionInInitializerError("Failed to initialize logger: " + e.getMessage());
        }
    }
    public static void StartGame(Scanner scanner) {
        boolean running = true;

        while (running) {
            System.out.println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â—É—é MMO RPG Bauman Gates");
            System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
            System.out.println("1. –ù–∞—á–∞—Ç—å –∏–≥—Ä—É");
            System.out.println("2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã –∏ —É—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è");
            System.out.println("3. –õ–æ—Ä –∏–≥—Ä—ã");
            System.out.println("4. –í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É");
            System.out.println("5. –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç");
            System.out.println("6. –ú–µ–Ω—é –≥–æ—Ä–æ–¥–∞");
            System.out.println("7. –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã");
            System.out.println("-----------------------------------");
            System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    startGame(scanner);
                    break;
                case 2:
                    showGameDescription(scanner);
                    break;
                case 3:
                    showGameLore(scanner);
                    break;
                case 4:
                    File[] mapFiles = new File(".").listFiles((dir, name) -> name.startsWith("map_") && name.endsWith(".txt"));
                    if (mapFiles != null && mapFiles.length > 0) {
                        System.out.println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã:");
                        for (int i = 0; i < mapFiles.length; i++) {
                            System.out.println((i + 1) + ". " + mapFiles[i].getName());
                        }

                        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: ");
                        int mapChoice = scanner.nextInt();

                        if (mapChoice > 0 && mapChoice <= mapFiles.length) {
                            String selectedMap = mapFiles[mapChoice - 1].getName();

                            Battlefield.loadMap(selectedMap); // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
                            ConfigManager.saveLastSelectedMap(selectedMap); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–∞—Ä—Ç—ã –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

                            System.out.println("–ö–∞—Ä—Ç–∞ " + selectedMap + " –≤—ã–±—Ä–∞–Ω–∞.");
                        } else {
                            System.out.println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.");
                        }
                    } else {
                        System.out.println("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç.");
                    }
                    break;
                case 5:
                    EditingMenu editingMenu = new EditingMenu();
                    editingMenu.run(scanner);
                    break;
                case 6:
                    GameMenu.showCityMenu(scanner); // –ú–µ–Ω—é –≥–æ—Ä–æ–¥–∞
                    break;
                case 7:
                    System.out.println("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã...");
                    running = false; // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª
                    scanner.close(); // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∫–∞–Ω–µ—Ä–∞
                    break;
                default:
                    System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }

    }


    private static void showGameDescription(Scanner scanner) {
        System.out.println("-----------------------------------");
        System.out.println("–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã –∏ —É—Å–ª–æ–≤–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:");
        System.out.println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â—É—é MMO RPG Bauman Gates!");
        System.out.println("–¶–µ–ª—å –∏–≥—Ä—ã: –ø–æ–±–µ–¥–∏—Ç—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, —É–Ω–∏—á—Ç–æ–∂–∏–≤ –≤—Å–µ—Ö –µ–≥–æ —é–Ω–∏—Ç–æ–≤.");
        System.out.println("–•–æ–¥ –∏–≥—Ä—ã: –∏–≥—Ä–æ–∫ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è, –ø–µ—Ä–µ–º–µ—â–∞—è —é–Ω–∏—Ç–æ–≤ –∏ –∞—Ç–∞–∫—É—è –≤—Ä–∞–≥–æ–≤.");
        System.out.println("–ö–∞–∫ –∏–≥—Ä–∞—Ç—å: –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ —é–Ω–∏—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–ª–∏ –∞—Ç–∞–∫–∏, —Å–ª–µ–¥—É—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ.");
        System.out.println("-----------------------------------");
        System.out.println("–ú–æ–∏ —é–Ω–∏—Ç—ã:");
        System.out.println("üó°Ô∏è –ú–µ—á–Ω–∏–∫ (–ó–¥–æ—Ä–æ–≤—å–µ: 50, –ó–∞—â–∏—Ç–∞: 8, –î–≤–∏–∂–µ–Ω–∏–µ: 3, –£—Ä–æ–Ω: 5, –†–∞–¥–∏—É—Å –∞—Ç–∞–∫–∏: 1, –¶–µ–Ω–∞: 10)");
        System.out.println("ü™ì –¢–æ–ø–æ—Ä—â–∏–∫ (–ó–¥–æ—Ä–æ–≤—å–µ: 45, –ó–∞—â–∏—Ç–∞: 3, –î–≤–∏–∂–µ–Ω–∏–µ: 4, –£—Ä–æ–Ω: 9, –†–∞–¥–∏—É—Å –∞—Ç–∞–∫–∏: 1, –¶–µ–Ω–∞: 20)");
        System.out.println("üèπ –õ—É—á–Ω–∏–∫ (–ó–¥–æ—Ä–æ–≤—å–µ: 30, –ó–∞—â–∏—Ç–∞: 8, –î–≤–∏–∂–µ–Ω–∏–µ: 2, –£—Ä–æ–Ω: 6, –†–∞–¥–∏—É—Å –∞—Ç–∞–∫–∏: 5, –¶–µ–Ω–∞: 15)");
        System.out.println("üéØ –ê—Ä–±–∞–ª–µ—Ç—á–∏–∫ (–ó–¥–æ—Ä–æ–≤—å–µ: 40, –ó–∞—â–∏—Ç–∞: 3, –î–≤–∏–∂–µ–Ω–∏–µ: 2, –£—Ä–æ–Ω: 7, –†–∞–¥–∏—É—Å –∞—Ç–∞–∫–∏: 6, –¶–µ–Ω–∞: 23)");
        System.out.println("üõ°Ô∏è –†—ã—Ü–∞—Ä—å (–ó–¥–æ—Ä–æ–≤—å–µ: 30, –ó–∞—â–∏—Ç–∞: 3, –î–≤–∏–∂–µ–Ω–∏–µ: 6, –£—Ä–æ–Ω: 5, –†–∞–¥–∏—É—Å –∞—Ç–∞–∫–∏: 1, –¶–µ–Ω–∞: 2)");
        System.out.println("üèá –ö–æ–Ω–Ω—ã–π –ª—É—á–Ω–∏–∫ (–ó–¥–æ—Ä–æ–≤—å–µ: 25, –ó–∞—â–∏—Ç–∞: 2, –î–≤–∏–∂–µ–Ω–∏–µ: 5, –£—Ä–æ–Ω: 3, –†–∞–¥–∏—É—Å –∞—Ç–∞–∫–∏: 3, –¶–µ–Ω–∞: 25)");
        System.out.println("-----------------------------------");
        System.out.println("–í—Ä–∞–≥–∏:");
        System.out.println("‚öîÔ∏è –í—Ä–∞–∂–µ—Å–∫–∏–π –ú–µ—á–Ω–∏–∫ (–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —é–Ω–∏—Ç–æ–º –ú–µ—á–Ω–∏–∫)");
        System.out.println("‚öíÔ∏è –í—Ä–∞–∂–µ—Å–∫–∏–π –¢–æ–ø–æ—Ä—â–∏–∫ (–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —é–Ω–∏—Ç–æ–º –¢–æ–ø–æ—Ä—â–∏–∫)");
        System.out.println("üèì –í—Ä–∞–∂–µ—Å–∫–∏–π –õ—É—á–Ω–∏–∫ (–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —é–Ω–∏—Ç–æ–º –¢—É—á–Ω–∏–∫)");
        System.out.println("üéæ –í—Ä–∞–∂–µ—Å–∫–∏–π –ê—Ä–±–∞–ª–µ—Ç—á–∏–∫ (–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —é–Ω–∏—Ç–æ–º –ê—Ä–±–∞–ª–µ—Ç—á–∏–∫)");
        System.out.println("üßô –í—Ä–∞–∂–µ—Å–∫–∏–π –†—ã—Ü–∞—Ä—å (–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —é–Ω–∏—Ç–æ–º –†—ã—Ü–∞—Ä—å)");
        System.out.println("üêé –í—Ä–∞–∂–µ—Å–∫–∏–π –ö–æ–Ω–Ω—ã–π –ª—É—á–Ω–∏–∫ (–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —é–Ω–∏—Ç–æ–º –ö–æ–Ω–Ω—ã–π –ª—É—á–Ω–∏–∫)");
        System.out.println("-----------------------------------");
        System.out.println("–í–≤–µ–¥–∏—Ç–µ '1', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.");
        System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");
        String choice = scanner.nextLine();
        System.out.println("-----------------------------------");
        if (choice.equals("1")) {
            StartGame(scanner);
        } else {
            System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...");
            StartGame(scanner);
        }
    }

    private static void showGameLore(Scanner scanner) {
        System.out.println("-----------------------------------");
        System.out.println("–õ–æ—Ä –∏–≥—Ä—ã:");
        System.out.println("–ú–∏—Ä Bauman Gates –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –≤–æ–π–Ω—ã –º–µ–∂–¥—É –¥–≤—É–º—è –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞–º–∏.");
        System.out.println("–ñ–∏—Ç–µ–ª–∏ —ç—Ç–∏—Ö –∑–µ–º–µ–ª—å –ø—Ä–∏–≤—ã–∫–ª–∏ –∫ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è–º –∏ —Å—á–∏—Ç–∞—é—Ç –∏—Ö —á–∞—Å—Ç—å—é –æ–±—ã–¥–µ–Ω–Ω–æ–π –∂–∏–∑–Ω–∏.");
        System.out.println("–ö–∞–∂–¥–æ–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ –≥–æ—Å–ø–æ–¥—Å—Ç–≤—É –Ω–∞–¥ –¥—Ä—É–≥–∏–º –∏ –≥–æ—Ç–æ–≤–æ –ø—Ä–∏–±–µ–≥–Ω—É—Ç—å –∫ –ª—é–±—ã–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π.");
        System.out.println("–í–∞—à–µ –∫–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–æ –≥–æ—Ç–æ–≤–æ —Å—Ä–∞–∑–∏—Ç—å—Å—è —Å –≤—Ä–∞–≥–∞–º–∏ –∏ –ø—Ä–∏–Ω–µ—Å—Ç–∏ –ø–æ–±–µ–¥—É —Å–≤–æ–µ–º—É –Ω–∞—Ä–æ–¥—É!");
        System.out.println("-----------------------------------");
        System.out.println("–í–≤–µ–¥–∏—Ç–µ '1', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.");
        System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");
        Integer choice = scanner.nextInt();
        System.out.println("-----------------------------------");
        if (choice.equals(1)) {
            StartGame(scanner);
        } else {
            System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...");
            StartGame(scanner);
        }

    }


    public static void startGame(Scanner scanner) {
        logger.info("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å");
        Battlefield battlefield = new Battlefield(9);
        System.out.println("-----------------------------------");
        System.out.println("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...");
        System.out.println("-----------------------------------");

        PlayerProgress playerProgress = PlayerProgress.loadProgress("game_progress.dat"); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if (playerProgress == null) {
            playerProgress = new PlayerProgress(); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        }

        City city = playerProgress.getCity(); // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–≥—Ä–æ–∫–∞
        BattlePreparation battlePreparation = new BattlePreparation(); // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –±–æ—é

        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –Ω–∞—á–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —é–Ω–∏—Ç–æ–≤:");
        System.out.println("1. –ù–∞—á–∞—Ç—å –∏–≥—Ä—É —Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º —é–Ω–∏—Ç–æ–≤");
        System.out.println("2. –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ—Å–µ—Ç –∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É");
        System.out.println("-----------------------------------");
        System.out.print("–í–∞—à –≤—ã–±–æ—Ä: ");
        int choice = scanner.nextInt();
        scanner.nextLine();

        System.out.println("-----------------------------------");

        switch (choice) {
            case 1:
                SetUnit setUnit = new SetUnit(city, battlePreparation); // –ü–µ—Ä–µ–¥–∞–µ–º City –∏ BattlePreparation
                setUnit.placeUnits(battlefield,scanner); // –†–∞–∑–º–µ—â–∞–µ–º —é–Ω–∏—Ç–æ–≤
                Enemy enemy = new Enemy(battlefield);
                enemy.placeEnemyUnits(); // –†–∞–∑–º–µ—â–∞–µ–º –≤—Ä–∞–≥–æ–≤
                break;
            case 2:
                SetUnit.setupPresetUnits(battlefield, city, battlePreparation); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç
                break;
            default:
                System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.");
                return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –º–µ—Ç–æ–¥, –µ—Å–ª–∏ –≤—ã–±–æ—Ä –Ω–µ–≤–µ—Ä–µ–Ω
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —é–Ω–∏—Ç–æ–≤
        playerProgress.saveProgress("game_progress.dat");

        battlefield.display(); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ

        // –¶–∏–∫–ª –∏–≥—Ä—ã
        int playerTurnCounter = 0;
        while (!battlefield.isGameOver()) {
            System.out.println("–•–æ–¥ –∏–≥—Ä–æ–∫–∞:");

            playerTurnCounter++;

            int playerActionsLeft = 2; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∏–≥—Ä–æ–∫–∞ –≤ —Ö–æ–¥–µ

            while (playerActionsLeft > 0) {
                System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
                System.out.println("1. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–æ–∏–Ω–∞");
                System.out.println("2. –ê—Ç–∞–∫–æ–≤–∞—Ç—å –≤—Ä–∞–≥–∞");
                System.out.println("3. –ê—Ç–∞–∫–æ–≤–∞—Ç—å —Å –∫–∞—Ç–∞–ø—É–ª—å—Ç—ã");
                System.out.println("4. –ê—Ç–∞–∫–æ–≤–∞—Ç—å –±–∞—à–Ω—é");

                System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ");
                int action = scanner.nextInt();
                scanner.nextLine();

                switch (action) {
                    case 1:
                        Actions.moveUnit(battlefield,scanner);
                        break;
                    case 2:
                        Actions.attackEnemy(battlefield,scanner);
                        break;
                    case 3:
                        Actions.attackWithCatapult(battlefield,scanner);
                        break;
                    case 4:
                        Actions.attackTower(battlefield, scanner);
                        break;
                    default:
                        System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                        continue; // –ü–æ–≤—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
                }


                playerActionsLeft--;

                if (playerActionsLeft >= 1) {
                    battlefield.display(); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏–π
                }

                if (playerTurnCounter % 2 == 0) {
                    battlefield.resetCatapultUsage(); // –°–±—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ç–∞–ø—É–ª—å—Ç—ã
                }
            }

            System.out.println("–•–æ–¥ –≤—Ä–∞–≥–∞:");
            EnemyActions.performEnemyActions(battlefield); // –î–µ–π—Å—Ç–≤–∏—è –≤—Ä–∞–≥–∞
            battlefield.display(); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏–π –≤—Ä–∞–≥–∞
            System.out.println("-----------------------------------");
        }

        System.out.println("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏–ª " + battlefield.getWinner());
        logger.info("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏–ª " + battlefield.getWinner());
        playerProgress = PlayerProgress.loadProgress("game_progress.dat");
        if (playerProgress != null) {
            city = playerProgress.getCity();
            System.out.println("–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –ø–æ—Å–ª–µ –∏–≥—Ä—ã: –ö–∞–º–µ–Ω—å = " + city.getResources().getStone() + ", –î–µ—Ä–µ–≤–æ = " + city.getResources().getWood());
        }
        fileHandler.close(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–∞


    }

}

